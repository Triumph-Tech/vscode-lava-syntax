{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lava",
  "scopeName": "text.html.lava",
  "fileTypes": [
    "html",
    "lava"
  ],
  "foldingStartMarker": "(?x){%-?\\s*(if|unless|for|capture|case|tablerow|raw|comment|block|stylesheet|javascript|cache|execute|sql|search|webrequest|personalize|interactioncontentchannelitemwrite|interactionwrite|eventscheduledinstance|calendarevents)[^(%})]+-?%}",
  "foldingStopMarker": "(?x){%-?\\s*(endif|endunless|endfor|endcapture|endcase|endtablerow|endraw|endcomment|endblock|endstylesheet|endjavascript|endcache|endexecute|endsql|endsearch|endwebrequest|endpersonalize|endinteractioncontentchannelitemwrite|endinteractionwrite|endeventscheduledinstance|endcalendarevents)[^(%})]+-?%}",
  "patterns": [
    {
      "include": "#frontMatter"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#comments-new"
    },
    {
      "include": "#comment-oneline"
    },
    {
      "include": "#raw"
    },
    {
      "include": "#cache"
    },
    {
      "include": "#csharp"
    },
    {
      "include": "#sql"
    },
    {
      "include": "#personalize"
    },
    {
      "include": "#eventscheduledinstance"
    },
    {
      "include": "#calendarevents"
    },
    {
      "include": "#interactionccwrite"
    },
    {
      "include": "#search"
    },
    {
      "include": "#javascript"
    },
    {
      "include": "#stylesheet"
    },
    {
      "include": "#webrequest"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#template-vars"
    },
    {
      "include": "#shortcode"
    },
    {
      "include": "#html"
    }
  ],
  "repository": {
    "template-tags": {
      "name": "punctuation.tag.lava",
      "begin": "({%)(-)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        }
      },
      "end": "(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "keyword.other.whitespace.lava"
        },
        "2": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "#assign"
        },
        {
          "include": "#invalid-control"
        },
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-numeric"
        },
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#entity-danger-name-tag"
        },
        {
          "include": "#keyword-name-tag"
        },
        {
          "include": "#entity-name-tag"
        },
        {
          "include": "#include-tag"
        },
        {
          "include": "#invalid-ampersand"
        },
        {
          "include": "#invalid-or"
        },
        {
          "include": "#invalid-array"
        },
        {
          "include": "#invalid-conditions"
        },
        {
          "include": "#invalid-operators"
        },
        {
          "include": "#keyword-control"
        },
        {
          "include": "#keyword-operators"
        },
        {
          "include": "#keyword-operator-assignment"
        },
        {
          "include": "#quoted-support-class"
        },
        {
          "include": "#string-quoted-double"
        },
        {
          "include": "#string-quoted-single"
        },
        {
          "include": "#support-class"
        },
        {
          "include": "#support-function"
        },
        {
          "include": "#support-variable"
        },
        {
          "include": "#support-constant"
        },
        {
          "include": "#variable-parameter"
        },
        {
          "include": "#object-properties"
        },
        {
          "include": "#invalid-assignment"
        }
      ]
    },
    "frontMatter": {
			"begin": "\\A{%-?\\s*comment\\s*-?%}\\s*-{3}\\s*$",
			"contentName": "meta.embedded.block.frontmatter",
			"patterns": [
				{
					"include": "source.yaml"
				}
			],
			"end": "(^|\\G)-{3}\\s*{%-?\\s*endcomment\\s*-?%}"
		},
    "comments": {
      "name": "comment.block.lava",
      "begin": "{%-?\\s*comment\\s*-?%}",
      "end": "{%-?\\s*endcomment\\s*-?%}"
    },
    "comments-new": {
      "name": "comment.block.lava",
      "begin": "(^[ \\t]+)?(?=/-)",
      "end": "-/"
		},
    "comment-oneline": {
			"begin": "(^[ \\t]+)?(?=//-)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.lava"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "//-",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lava"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-slash.lava"
				}
			]
		},
    "raw": {
      "name": "markup.raw.block.lava",
      "begin": "({%)(-)?\\s*(raw)\\s*(-)?(%})",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "end": "({%)(-)?\\s*(endraw)\\s*(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      }
    },
    "template-vars": {
      "name": "punctuation.output.lava",
      "begin": "({{)(-)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2": {
          "name": "keyword.other.whitespace.lava"
        }
      },
      "end": "(-)?(}})",
      "endCaptures": {
        "1": {
          "name": "keyword.other.whitespace.lava"
        },
        "2": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "#object-properties"
        },
        {
          "include": "#quoted-support-class"
        },
        {
          "include": "#string-quoted-double"
        },
        {
          "include": "#string-quoted-single"
        },
        {
          "include": "#support-class"
        },
        {
          "include": "#support-function"
        }
      ]
    },
    "invalid-control": {
      "name": "invalid.illegal.control.lava",
      "match": "elsif"
    },
    "constant-boolean": {
      "name": "constant.language.lava",
      "match": "(false|true|nil|null|empty|blank)\\b"
    },
    "constant-numeric": {
      "name": "constant.numeric.lava",
      "match": "(-|\\+)?\\b[0-9]+(\\.[0-9]+)?\\b"
    },
    "entity-danger-name-tag": {
      "match": "(((?<={%)|(?<={%-))\\s*(campus|endcampus|definedtype|enddefineddype))",
      "captures": {
        "1":{
          "name": "invalid.deprecated.tag.lava"
        }
      }
    },
    "keyword-name-tag": {
      "match": "(((?<={%)|(?<={%-))\\s*(if|endif|case|endcase|when|elseif|else|for|endfor|capture|endcapture|unless|endunless))\\b",
      "captures": {
        "1":{
          "name": "keyword.control.loop.lava"
        }
      }
    },
    "entity-name-tag": {
      "match": "(((?<={%)|(?<={%-))\\s*(assign))",
      "captures": {
        "1":{
          "name": "entity.name.tag.lava"
        }
      }
    },
    "include-tag":{
      "name": "string.quoted.lava",
      "match": "((?<=include)|(?<=include_relative))\\s[^{,'\"]+?\\s+"
    },
    "invalid-ampersand": {
      "match": "&",
      "name": "invalid.illegal.bad-ampersand.lava"
    },
    "invalid-or": {
      "match": "\\|\\|",
      "name": "invalid.illegal.bad-or.lava"
    },
    "invalid-array": {
      "match": "(\\[)(\\|)(?=[^\\]]*)(?=\\])",
      "captures": {
        "2": {
          "name": "invalid.illegal.filter.lava"
        },
        "3": {
          "name": "invalid.illegal.filter.lava"
        }
      }
    },
    "invalid-conditions": {
      "match": "(?=if|unless|elseif)\\s*[^%}]+\\s*(in|\\|[^%}]*)",
      "captures": {
        "1": {
          "name": "invalid.illegal.operator.lava"
        }
      }
    },
    "invalid-operators": {
      "name": "invalid.illegal.filter.lava",
      "match": "(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)"
    },
    "invalid-assignment": {
      "match": "(?<=assign)([^\\=]+)(\\=\\=+)",
      "captures": {
        "2": {
          "name": "invalid.illegal.assignment.lava"
        }
      }
    },
    "keyword-control": {
      "name": "keyword.control.lava",
      "match": "(?<=\\s)(with|offset\\:|limit\\:)(?=\\s)"
    },
    "keyword-control-conditional": {
      "name": "keyword.control.conditional.lava"
    },
    "keyword-operators": {
      "name": "keyword.operator.lava",
      "match": "\\s+(and|or|not|contains|startswith|endswith|in|by|\\!=|\\=\\=|\\<|\\>|\\<\\=|\\>\\=)\\s+"
    },
    "keyword-operator-assignment": {
      "match": "/=",
      "name": "keyword.operator.assignment.augmented.lava"
    },
    "object-properties": {
      "match": "(?<=\\w\\.)\\w+?\\b\\s+",
      "name": "variable.parameter.lava"
    },
    "string-quoted-single": {
      "name": "string.quoted.single.lava",
      "begin": "'",
      "end": "'"
    },
    "string-quoted-double": {
      "name": "string.quoted.double.lava",
      "begin": "\"",
      "end": "\""
    },
    "support-class": {
      "name": "support.class.lava",
      "match": "\\b(CurrentPerson|Context|Campuses|PageParameter|CurrentPage|Person|CurrentBrowser|forloop|Item|item|Items|javascript|order|tablerow)\\b"
    },
    "quoted-support-class": {
      "name": "support.class.lava",
      "match": "('Now'|'Global'|'Lava')"
    },
    "invalid-support-function": {
      "name": "invalid.illegal.function.lava",
      "match": "\\|\\s+[a-z].*\\b"
     },
    "support-function": {
      "match": "(\\|)\\s*(First|LastAttendedGroupOfType|Last|AppendFollowing|Append|Capitalize|Decrypt|Default|Downcase|EscapeDataString|Escape|FromMarkdown|HtmlDecode|Linkify|NewlineToBr|PluralizeForQuantity|Pluralize|Possessive|Prepend|ReadTime|RegExMatchValues|RegExMatchValue|RegExMatch|ReplaceFirst|ReplaceLast|Replace|Right|SanitizeSql|SentenceCase|Singularize|Size|Slice|Split|StripHtml|StripNewlines|TitleCase|ToCssClass|ToPascal|TrimEnd|TrimStart|Trim|TruncateWords|Truncate|UnescapeDataString|Upcase|WithFallback|DateAdd|DateDiff|DatesFromICal|Date|DaysFromNow|DaysInMonth|DaysSince|DaysUntil|HumanizeDateTime|HumanizeTimeSpan|Humanize|NextDayOfTheWeek|SundayDate|ToMidnight|AtLeast|AtMost|Ceiling|DividedBy|Floor|FormatAsCurrency|Format|Minus|Modulo|NumberToOrdinalWords|NumberToOrdinal|NumberToRomanNumerals|NumberToWords|ObfuscateEmail|Plus|Times|ToQuantity|ToString|Lighten|Darken|Desaturate|Saturate|FadeIn|FadeOut|AdjustHue|Tint|Shade|Mix|Grayscale|Contains|Join|Map|OrderBy|Select|Shuffle|Size|SortByAttribute|Sort|Where|Address|Campus|Children|DeleteUserPreference|FamilySalutation|GeofencingGroupMembers|GeofencingGroups|GetPersonAlternateId|GetUserPreference|GroupsAttended|HasSignedDocument|HeadOfHousehold|NearestGroup|Parents|PersonActionIdentifier|PersonByAliasGuid|PersonByAliasId|PersonByGuid|PersonById|PersonByPersonAlternateId|PersonImpersonationToken|PersonTokenCreate|PersonTokenRead|PhoneNumber|SetUrlParameter|SetUserPreference|Spouse|ZebraPhoto|Attribute|AddLinkTagToHead|AddMetaTagToHead|Postback|SetPageTitle|PropertyToKeyValue|Property|PageRedirect|PageParameter|PageRoute|Page|HasRightsTo|Notes|FromCache|ResolveRockUrl|AsBoolean|AsInteger|AsDecimal|AsDouble|AsString|AsDateTime|Debug|Client|AddCssLink|AddScriptLink|Url|Base64Encode|GroupById|GroupByGuid|CreateShortLink|Md5|Sha1|Sha256|HmacSha1|HmacSha256|XamlWrap|PersistedDataset|FilterFollowed|FilterUnfollowed|ToJSON|FromJSON|AddToArray|Distinct|GroupBy|RemoveFromArray|Sum|AddToDictionary|AllKeysFromDictionary|RemoveFromDictionary|AddResponseHeader|FromBase64|RunLava|RegExReplace|WriteCookie|RandomNumber|Index|EntityFromCachedObject|ImageUrl|IsDateBetween|IsFollowed|ReadCookie|RockInstanceConfig|AddQuickReturn|UniqueIdentifier|Uniq|TriumphImgCdn|Steps|RemoveFirst|Remove|Groups|Group|TimeOfDay|DateRangeFromSlidingFormat|IsInSecurityRole|PersonalizationItems|IsInDataView)\\:?",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.lava"
        },
        "2": {
          "name": "entity.name.function.lava"
        }
      }
    },
    "support-variable": {
        "name": "support.variable.lava",
        "match": "\\b(Date|Index|Size)\\b"
    },
    "support-constant": {
      "name":"support.constant.lava",
      "match": "\\b(Default|First|Last)\\b"
    },
    "support-function-with-args": {
      "name": "support.function.with-args.lava",
      "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\:\\s+"
    },
    "support-function-without-args": {
      "name": "support.function.without-args.lava",
      "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\s+"
    },
    "var-support-variable": {
      "name": "support.variable.lava",
      "match": "(?<=\\.)\\w+\\b"
    },
    "variable-parameter": {
      "name": "variable.parameter.lava",
      "match": "((?<=\\w\\:\\s)\\w+)"
    },
    "variable-other": {
      "name": "variable.other.lava",
      "match": "\\w+"
    },
    "stylesheet": {
      "contentName": "meta.embedded.block.less",
			"begin": "({%)(-)?\\s*(stylesheet)\\s*(.*?)\\s*(-)?(%})",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(id:|compile:|import:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(cacheduration:)\\s*('[0-9]*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(cacheduration:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "invalid.illegal.string.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endstylesheet)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "source.css.less"
        }
      ]
    },
    "javascript": {
      "contentName": "meta.embedded.block.javascript",
      "begin": "({%)(-)?\\s*(javascript)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(id:|references:|disableanonymousfunction:|url:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endjavascript)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    "sql": {
      "name": "embed.sql.lava",
      "contentName": "meta.embedded.inline.sql",
			"begin": "({%)(-)?\\s*(sql)\\s*(.*?)\\s*(-)?(%})",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endsql)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "source.sql"
        }
      ]
    },
    "interactionccwrite": {
			"match": "({%)(-)?\\s*(interactioncontentchannelitemwrite)\\s*(.*?)\\s*(-)?(%})",
			"captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(contentchannelitemid:|operation:|summary:|personaliasid:|campaign:|medium:|source:|content:|term:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			}
    },
    "calendarevents": {
			"begin": "({%)(-)?\\s*(calendarevents )\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(calendarid:|maxoccurrences:|daterange:|audienceids:|campusids:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endcalendarevents)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "eventscheduledinstance": {
			"begin": "({%)(-)?\\s*(eventscheduledinstance)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(eventid:|maxoccurrences:|daterange:|campusids:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endeventscheduledinstance)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "personalize": {
			"begin": "({%)(-)?\\s*(personalize)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(segment:|requestfilter:|matchtype:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endpersonalize)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "search": {
			"begin": "({%)(-)?\\s*(search)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(query:|entities:|fieldcriteria:|criteriasearchtype:|searchtype:|iterator:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(limit:|offset:)\\s*('[0-9]*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(limit:|offset:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "invalid.illegal.string.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endsearch)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "webrequest": {
      "contentName": "meta.embedded.block.webrequest",
			"begin": "({%)(-)?\\s*(webrequest)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(url:|parameters:|headers:|method:|basicauth:|body:|requestcontenttype:|responsecontenttype:|return:|requesttype:|timeout:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "name": "invalid.illegal.filter.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endwebrequest)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "cache": {
      "contentName": "meta.embedded.block.cache",
			"begin": "({%)(-)?\\s*(cache)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(key:|twopass:|tags:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(duration:|maxcachesize:)\\s*('[0-9]*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(duration:|maxcachesize:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "invalid.illegal.string.lava"
                }
              }
            },
            {
              "match": "\\S",
              "name": "invalid.illegal.bad-command.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endcache)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "csharp": {
      "contentName": "meta.embedded.block.csharp",
			"begin": "({%)(-)?\\s*(execute)\\s*(.*?)\\s*(-)?(%})",
			"beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b(import:|type:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\S",
              "name": "invalid.illegal.bad-command.lava"
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({%)(-)?\\s+(endexecute)\\s+(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "keyword.control.lava"
        },
        "4":{
          "name": "keyword.other.whitespace.lava"
        },
        "5": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "source.cs"
        }
      ]
    },
    "assign": {
			"match": "\\s*(assign)\\s+([a-zA-Z0-9]+)\\s*(=)\\s*([.a-zA-Z0-9]*|'[^']*')\\s*(.*?)\\s*",
			"captures": {
        "1": {
          "name": "storage.type.lava"
        },
        "2": {
          "name": "variable.other.readwrite.lava"
        },
        "3": {
          "name": "keyword.operator.assignment.lava"
        },
        "4": {
          "patterns": [
            {
              "include": "#string-quoted-double"
            },
            {
              "include": "#string-quoted-single"
            },
            {
              "name": "variable.other.readwrite.lava",
              "begin": "\\[",
              "end": "\\]"
            },
            {
              "match": "[.a-zA-Z0-9]+",
              "name": "variable.other.constant.object.lava"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#support-function"
            }
          ]
        }
			}
    },
    "entity": {
			"begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)([a-zA-Z0-9]+)\\s*(.*?)\\s*(?=%})",
			"beginCaptures": {
        "1": {
          "name": "entity.name.tag.$1.begin.lava"
        },
        "2": {
          "patterns": [
            {
              "begin": "\\b(where:)\\s*(')",
              "beginCaptures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              },
              "end": "(')",
              "endCaptures": {
                "1": {
                  "name": "string.quoted.single.lava"
                }
              },
              "patterns": [
                {
                  "name": "keyword.operator.comparison.lava",
                  "match": "\\s+(\\*\\!|\\_\\!|\\>|\\<|((\\!|\\=|\\^|\\*|\\_|\\<|\\>\\$)\\=))\\s+"
                },
                {
                  "name": "constant.language.lava",
                  "match": "(false|true)"
                },
                {
                  "name": "keyword.numeric.lava",
                  "match": "\\b([0-9]+)"
                },
                {
                  "name": "keyword.entity.lava",
                  "match": "\\b([.a-zA-Z0-9]+)"
                },
                {
                  "name": "keyword.operator.entity",
                  "match": "\\s+(\\|\\||&&)\\s+"
                },
                {
                  "include": "text.html.lava#template-vars"
                },
                {
                  "name": "string.quoted.double.lava",
                  "begin": "\"",
                  "end": "\""
                },
                {
                  "match": "\\S",
                  "name": "invalid.illegal.good-command.lava"
                }
              ]
            },
            {
              "begin": "\\b(select:)\\s*(')",
              "beginCaptures": {
                "1": {
                  "name": "variable.parameter.lava"
                }
              },
              "end": "(')",
              "patterns": [
                {
                  "match": "(new\\b|Select)",
                  "name": "entity.name.function.cs"
                },
                {
                  "match": "\\b(AS)\\s*([a-zA-Z0-9]+)",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.cs"
                    },
                    "2": {
                      "name": "entity.name.variable.local.cs"
                    }
                  }
                },
                {
                  "match": "[0-9]+",
                  "name": "constant.numeric.decimal.cs"
                },
                {
                  "match": "([a-zA-Z0-9]+)",
                  "name": "variable.other.object.cs"
                },
                {
                  "name": "punctuation.separator.comma.cs",
                  "match": ","
                }
              ]
            },
            {
              "match": "\\b(ids:|sort:|dynamicparameters:|iterator:|securityenabled:|lazyloadenabled:|expression:|count:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(id:|dataview:|limit:|offset:)\\s*('[0-9]*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(id:|dataview:|limit:|offset:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "invalid.illegal.string.lava"
                }
              }
            },
            {
              "match": "\\S",
              "name": "invalid.illegal.bad-command.lava"
            }
          ]
        }
			},
      "end": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(end([a-zA-Z0-9]+))(?:\\s+-?%})",
      "endCaptures": {
        "1": {
          "name": "entity.name.tag.$2.end.lava"
        }
      },
      "patterns": [
        {
          "include": "text.html.lava"
        }
      ]
    },
    "shortcode": {
			"begin": "({\\[)(-)?\\s*([a-zA-Z0-9]+)\\s*(.*?)\\s*(-)?(\\]})",
			"beginCaptures": {
        "0": {
          "name": "meta.tag.structure.$3.start.lava"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "entity.name.tag.lava"
        },
        "4": {
          "patterns": [
            {
              "match": "\\b((?=\\w*[A-Z])\\w+\\b:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "invalid.illegal.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            },
            {
              "match": "\\b(\\S+:)\\s*('[^']*')",
              "captures": {
                "1": {
                  "name": "variable.parameter.lava"
                },
                "2": {
                  "name": "string.quoted.single.lava"
                }
              }
            }
          ]
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
			},
      "end": "({\\[)(-)?\\s+(end([a-zA-Z0-9]+))\\s+(-)?(\\]})",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.$4.end.lava"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        },
        "2":{
          "name": "keyword.other.whitespace.lava"
        },
        "3": {
          "name": "entity.name.tag.lava"
        },
        "5":{
          "name": "keyword.other.whitespace.lava"
        },
        "6": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "include": "#shortcodeitem"
        },
        {
          "include": "text.html.lava"
        }
      ]
    },
    "shortcodeitem": {
      "name": "punctuation.shortcodeitem.lava",
      "begin": "(\\[\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.lava"
        }
      },
      "end": "(\\]\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.lava"
        }
      },
      "patterns": [
        {
          "match": "((?<=\\[\\[)\\s*(\\w+))",
          "captures": {
            "1":{
              "name": "entity.name.tag.lava"
            }
          }
        },
        {
          "match": "\\b(\\S+:)\\s*('[^']*')",
          "captures": {
            "1": {
              "name": "variable.parameter.lava"
            },
            "2": {
              "name": "string.quoted.single.lava"
            }
          }
        },
        {
          "include": "#string-quoted-double"
        },
        {
          "include": "#string-quoted-single"
        },
        {
          "include": "#var-support-variable"
        },
        {
          "include": "#variable-parameter"
        },
        {
          "include": "#variable-other"
        }
      ]
    },
    "entitywhere": {
      "begin": "\\b(where:)\\s*'",
      "beginCaptures": {
        "1": {
          "name": "variable.parameter.lava"
        }
      },
      "end": "'",
      "patterns": [
        {
          "include": "text.html.basic"
        }
      ]
    },
    "html": {
      "include": "text.html.basic"
    }
  }
}